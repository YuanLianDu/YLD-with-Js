/**
 * Created by yuan on 16/10/11.
 */

/***********************变量作用域***********************/

/*

变量在函数中的作用域：
1、如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量；
2、不同函数内部的同名变量互相独立，互不影响；
3、JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行；
4、如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量；

 */


/*
变量提升：

JavaScript的函数定义有个特点，

它会先扫描整个函数体的语句，

把所有申明的变量“提升”到函数顶部，

但是不会提升变量的赋值；

所以在一个函数内部，先声明所有的变量
 */


/*
全局作用域：
1、javascript有一个全局对象，window，全局作用域的变量实际被绑定到window的一个属性上。
 */

/*
命名空间：
 全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现

 减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

 // 唯一的全局变量MYAPP:
 var MYAPP = {};

 // 其他变量:
 MYAPP.name = 'myapp';
 MYAPP.version = 1.0;

 // 其他函数:
 MYAPP.foo = function () {
 return 'foo';
 };
 */

/*
块级作用域（let）：

1、例如for循环定义了一个变量，在for循环外，仍然可以引用；
2、假如不想让它被使用，可以采用let声明变量
 */

/*
常量：
es6：const PI = 3.14;

es6之前： var PI = 3.14;   大写，然后不要修改它
 */